//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Reflection;
using CPM.ApiNotificacionesWhatsapp.Aplicacion.Extensiones;
using CPM.ApiNotificacionesWhatsapp.Dominio.Extensiones;
using CPM.ApiNotificacionesWhatsapp.Infraestructura.Extensiones;
using CPM.ApiNotificacionesWhatsapp.Persistencia.Extensiones;
using CPM.ApiNotificacionesWhatsapp.ServicioAPI.Extensiones;
using CPM.Extensiones.Configuracion.Core.Configuracion;
using CPM.Extensiones.Configuracion.Core.Enumerados;
using CPM.Extensiones.Configuracion.Core.Extensiones;
using CPM.Logging.Xml.Extensiones;

var builder = WebApplication.CreateBuilder(args);
var configuration = builder.Configuration;
var services = builder.Services;

// 1. Carga configuración base de la aplicación.
AssemblyName assemblyName = Assembly.GetExecutingAssembly().GetName();
configuration.AgregarConfiguracionInicial(new Dictionary<string, string>()
{
    { "Aplicacion:TipoAplicacion", TipoAplicacion.API.ToString() },
    { "Aplicacion:Titulo", "ApiNotificacionesWhatsapp" },
    { "Aplicacion:NombreAplicacion", $"Api{(assemblyName.Name!.Split('.').Length > 1 ? assemblyName.Name.Split('.')[1] : assemblyName.Name)}" },
    { "Aplicacion:Version", assemblyName.Version!.ToString() },
});

// Inicializar el logger.
var logger = builder.Services.RegistrarLoggerFactory(configuration).CreateLogger<Program>();
logger.BeginScope(new { IdTransaccion = Guid.NewGuid().ToString().ToUpper(), Usuario = "SISTEMA" });

// Obtener valores variables de ambiente a configuración y agregar a la sección ServiciosExternos.
configuration.AgregarVariablesEntorno(configuration, logger);

// Modificar prioridad de archivos appsettings.{ENVIRONMENT}.json
configuration.ModificarPrioridadConfiguracion();

// Se obtiene la configuración de las secciones Aplicacion y ServiciosExternos.
var aplicacion = new AplicacionBase();
var serviciosExternos = new ServiciosExternosBase();
configuration.GetSection("Aplicacion").Bind(aplicacion);
configuration.GetSection("ServiciosExternos").Bind(serviciosExternos);
// Registro de Configuración semilla, palabra clave y prefijo desde el servicio de seguridad.
services.AddHttpClient();
await configuration.AgregarConfiguracionSeguridad(aplicacion, serviciosExternos, logger);

// Registro de configuración adicional (COMMUNICATOR, REACHCORE, VERITAN, etc).
//// await builder.Configuration.AgregarConfiguracionSeguridad(aplicacion, serviciosExternos, 1, typeof(Communicator), logger);

// Carga del archivo appsettings alojado en el servicio de seguridad.
await configuration.AgregarArchivoJson(aplicacion, serviciosExternos, logger);

// 2. Registro de Configuración común para cualquier tipo de solución (API,WST,WEB).
//// builder.Services.Configure<Communicator>(configuration.GetSection(nameof(Communicator)));

// 3. Configuración especifica para procesos de negocio.
// CPM.ApiNotificacionesWhatsapp.Dominio
services.RegistrarMapeosDominio();

// CPM.ApiNotificacionesWhatsapp.Aplicacion
services.RegistrarConfiguracionAplicacion(configuration, logger)
        .RegistrarMapeosAplicacion()
        .RegistrarValidadoresAplicacion();

// CPM.ApiNotificacionesWhatsapp.Infraestructura
// Configuración capa Infraestructura.
services.RegistrarConfiguracionInfraestructura(configuration, logger)
        .RegistrarServiciosInfraestructura();

// CPM.ApiNotificacionesWhatsapp.Persistencia
services.RegistrarConfiguracionPersistencia(configuration, logger)
        .RegistrarRepositoriosPersistencia();

// Servicios de la aplicación CPM.ApiNotificacionesWhatsapp.ServicioAPI.
// Servicios de la capa de presentación web.
services.RegistrarServiciosAPI(configuration);

// CPM.ApiNotificacionesWhatsapp.Aplicacion
services.RegistrarServiciosOrquestacion();

// Construir aplicación.
builder.ConstruirAplicacion(logger).Run();